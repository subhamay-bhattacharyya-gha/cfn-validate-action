name: 'CloudFormation Template Validator'
description: 'Validates CloudFormation templates, nested templates, and parameters files with comprehensive error reporting and artifact generation. Requires repository checkout and AWS credentials to be configured by caller workflow.'
author: 'Subhamay Bhattacharyya'
branding:
  icon: 'check-circle'
  color: 'orange'

inputs:
  cloudformation-dir:
    description: 'Directory containing CloudFormation templates'
    required: false
    default: '.'
  template-file:
    description: 'Main CloudFormation template filename'
    required: false
    default: 'template.yaml'
  parameters:
    description: 'CloudFormation parameters as JSON array string in format: [{"ParameterName":"string","ParameterValue":"string"}]'
    required: false
    default: ''
  aws-region:
    description: 'AWS region for validation'
    required: false
    default: 'us-east-1'
  aws-role-arn:
    description: 'AWS IAM role ARN for authentication'
    required: true
  github-token:
    description: 'GitHub token for artifact upload'
    required: false
    default: ${{ github.token }}

outputs:
  validation-result:
    description: 'Overall validation result (success/failure)'
    value: ${{ steps.summary.outputs.validation-result }}

runs:
  using: 'composite'
  steps:
    - name: Print Inputs for Debugging
      id: print-inputs
      shell: bash
      working-directory: ${{ github.workspace }}
      run: |
        set -euo pipefail
        
        # Enable detailed logging
        echo "::group::🔧 Debug Information"
        echo "🔍 Starting CloudFormation template validation"
        echo "📅 Timestamp                : $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
        echo "📁 Working Directory        : $(pwd)"
        echo "📁 CloudFormation Directory : ${{ inputs.cloudformation-dir }}"
        echo "📁 Template file            : ${{ inputs.template-file}}"
        echo "📁 Parameters               : ${{ inputs.parameters }}"
        echo "🌍 AWS Region               : ${{ inputs.aws-region }}"
        echo "🔑 AWS CLI Version          : $(aws --version 2>&1 || echo 'AWS CLI not available')"
        echo "::endgroup::"

    - name: Validate CloudFormation directory and template
      id: validate-directory-template
      shell: bash
      working-directory: ${{ github.workspace }}
      run: |
        echo "🔍 Validating CloudFormation template: ${{ inputs.template-file}}"
        
        # Validate input parameters
        if [[ -z "${{ inputs.cloudformation-dir }}" ]]; then
          echo "::error::CloudFormation directory is empty or not specified"
          echo "result=failure" >> $GITHUB_OUTPUT
          echo "error=CloudFormation directory is empty" >> $GITHUB_OUTPUT
          exit 1
        fi
        
        if [[ -z "${{ inputs.template-file}}" ]]; then
          echo "::error::Template file name is empty or not specified"
          echo "result=failure" >> $GITHUB_OUTPUT
          echo "error=Template file name is empty" >> $GITHUB_OUTPUT
          exit 1
        fi
        
        # Check if CloudFormation directory exists
        if [[ ! -d "${{ inputs.cloudformation-dir }}" ]]; then
          echo "::error::CloudFormation directory does not exist: ${{ inputs.cloudformation-dir }}"
          echo "📁 Current directory contents:"
          ls -la . || echo "Unable to list current directory"
          echo "result=failure" >> $GITHUB_OUTPUT
          echo "error=CloudFormation directory not found: ${{ inputs.cloudformation-dir }}" >> $GITHUB_OUTPUT
          exit 1
        fi
        
        # Check if template file exists
        if [[ ! -f "${{ inputs.template-file }}" ]]; then
          echo "::error::Template file not found: ${{ inputs.template-file }}"
          echo "📁 Available files in ${CLOUDFORMATION_DIR}:"
          ls -la "${{ inputs.cloudformation-dir }}" 2>&1 || echo "Unable to list directory contents"
          
          echo "result=failure" >> $GITHUB_OUTPUT
          echo "error=Template file not found: ${{ inputs.template-file }}" >> $GITHUB_OUTPUT
          exit 1
        fi
        
        echo "✅ Template file found: ${{ inputs.template-file }}"
        
        # Validate file is readable and not empty
        if [[ ! -r "${{ github.workspace }}/${{ inputs.template-file }}" ]]; then
          echo "::error::Template file is not readable: ${{ inputs.template-file }}"
          echo "result=failure" >> $GITHUB_OUTPUT
          echo "error=Template file is not readable" >> $GITHUB_OUTPUT
          exit 1
        fi
        
        FILE_SIZE=$(stat -f%z "${{ github.workspace }}/${{ inputs.template-file }}" 2>/dev/null || stat -c%s "${{ github.workspace }}/${{ inputs.template-file }}" 2>/dev/null || echo "0")
        if [[ "${FILE_SIZE}" -eq 0 ]]; then
          echo "::error::Template file is empty: ${{ inputs.template-file }}"
          echo "result=failure" >> $GITHUB_OUTPUT
          echo "error=Template file is empty" >> $GITHUB_OUTPUT
          exit 1
        fi
        
        echo "📏 Template file size: ${FILE_SIZE} bytes"
        
        # Create output directory for validation results
        mkdir -p validation-output
        
        # Log template file preview for debugging
        echo "::group::📄 Template File Preview (first 10 lines)"
        head -10 "${{ github.workspace }}/${{ inputs.template-file }}" 2>/dev/null || echo "Unable to preview template file"
        echo "::endgroup::"





    #   env:
    #     # AWS CLI configuration for retries and timeouts
    #     AWS_MAX_ATTEMPTS: 3
    #     AWS_RETRY_MODE: adaptive
    #     AWS_CLI_READ_TIMEOUT: 300
    #     AWS_CLI_CONNECT_TIMEOUT: 60
    #   run: |

        
    #     # Set environment variables with validation
    #     CLOUDFORMATION_DIR="${{ inputs.cloudformation-dir }}"
    #     TEMPLATE_FILE="${{ inputs.template-file }}"
    #     TEMPLATE_PATH="${{ github.workspace }}/${TEMPLATE_FILE}"
        

        
    #     # Validate template using AWS CLI with comprehensive error handling
    #     echo "🔄 Running AWS CloudFormation template validation..."
    #     echo "⏱️ Validation started at: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
        
    #     # Function to perform AWS CLI validation with retry logic
    #     validate_template_with_retry() {
    #       local attempt=1
    #       local max_attempts=3
    #       local retry_delay=5
          
    #       while [[ $attempt -le $max_attempts ]]; do
    #         echo "🔄 Validation attempt ${attempt}/${max_attempts}"
            
    #         # Set timeout for the AWS CLI command
    #         if timeout 300 aws cloudformation validate-template \
    #           --template-body "file://${TEMPLATE_PATH}" \
    #           --region "${{ inputs.aws-region }}" \
    #           --output json > validation-output/main-template-validation.json 2> validation-output/main-template-errors.log; then
              
    #           echo "✅ Template validation successful on attempt ${attempt}!"
    #           return 0
    #         else
    #           local exit_code=$?
    #           echo "❌ Validation attempt ${attempt} failed with exit code: ${exit_code}"
              
    #           # Log error details for this attempt
    #           if [[ -f validation-output/main-template-errors.log ]]; then
    #             echo "::group::🔍 Error details for attempt ${attempt}"
    #             cat validation-output/main-template-errors.log
    #             echo "::endgroup::"
                
    #             # Check for specific error types that shouldn't be retried
    #             if grep -q "ValidationError" validation-output/main-template-errors.log; then
    #               echo "🚫 Template syntax error detected - not retrying"
    #               return $exit_code
    #             fi
                
    #             if grep -q "AccessDenied\|UnauthorizedOperation\|InvalidUserID.NotFound" validation-output/main-template-errors.log; then
    #               echo "🚫 Authentication/authorization error detected - not retrying"
    #               return $exit_code
    #             fi
    #           fi
              
    #           if [[ $attempt -lt $max_attempts ]]; then
    #             echo "⏳ Waiting ${retry_delay} seconds before retry..."
    #             sleep $retry_delay
    #             retry_delay=$((retry_delay * 2))  # Exponential backoff
    #           fi
              
    #           attempt=$((attempt + 1))
    #         fi
    #       done
          
    #       echo "❌ All validation attempts failed"
    #       return 1
    #     }
        
    #     # Execute validation with retry logic
    #     if validate_template_with_retry; then
    #       echo "⏱️ Validation completed at: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          
    #       # Validate that the output file was created and is valid JSON
    #       if [[ ! -f validation-output/main-template-validation.json ]]; then
    #         echo "::error::Validation output file was not created"
    #         echo "result=failure" >> $GITHUB_OUTPUT
    #         echo "error=Validation output file missing" >> $GITHUB_OUTPUT
    #         exit 1
    #       fi
          
    #       # Validate JSON output
    #       if ! jq empty validation-output/main-template-validation.json 2>/dev/null; then
    #         echo "::error::Validation output is not valid JSON"
    #         echo "🔍 Raw output content:"
    #         cat validation-output/main-template-validation.json 2>/dev/null || echo "Unable to read output file"
    #         echo "result=failure" >> $GITHUB_OUTPUT
    #         echo "error=Invalid JSON in validation output" >> $GITHUB_OUTPUT
    #         exit 1
    #       fi
          
    #       # Display template capabilities and parameters using jq
    #       echo "::group::📋 Template Details"
          
    #       # Extract and display description
    #       DESCRIPTION=$(jq -r '.Description // "No description provided"' validation-output/main-template-validation.json)
    #       echo "📝 Description: ${DESCRIPTION}"
          
    #       # Extract and display capabilities
    #       CAPABILITIES=$(jq -r '.Capabilities[]? // empty' validation-output/main-template-validation.json)
    #       if [[ -n "${CAPABILITIES}" ]]; then
    #         echo "🔐 Required Capabilities:"
    #         echo "${CAPABILITIES}" | while read -r capability; do
    #           echo "  - ${capability}"
    #         done
            
    #         # Display capabilities reason if available
    #         CAPABILITIES_REASON=$(jq -r '.CapabilitiesReason // empty' validation-output/main-template-validation.json)
    #         if [[ -n "${CAPABILITIES_REASON}" ]]; then
    #           echo "💡 Reason: ${CAPABILITIES_REASON}"
    #         fi
    #       else
    #         echo "🔐 No special capabilities required"
    #       fi
          
    #       # Extract and display parameters
    #       PARAMETERS=$(jq -r '.Parameters[]? // empty' validation-output/main-template-validation.json)
    #       if [[ -n "${PARAMETERS}" ]]; then
    #         echo "📝 Template Parameters:"
    #         jq -r '.Parameters[] | "  - \(.ParameterKey): \(.Description // "No description") (Default: \(.DefaultValue // "None"))"' validation-output/main-template-validation.json
            
    #         # Count parameters
    #         PARAM_COUNT=$(jq '.Parameters | length' validation-output/main-template-validation.json)
    #         echo "📊 Total parameters: ${PARAM_COUNT}"
    #       else
    #         echo "📝 No parameters defined in template"
    #       fi
          
    #       # Extract and display metadata if available
    #       METADATA=$(jq -r '.Metadata // empty' validation-output/main-template-validation.json)
    #       if [[ -n "${METADATA}" ]] && [[ "${METADATA}" != "null" ]]; then
    #         echo "🏷️ Template includes metadata"
    #       fi
          
    #       echo "::endgroup::"
          
    #       # Set success outputs
    #       echo "result=success" >> $GITHUB_OUTPUT
    #       echo "template-path=${TEMPLATE_PATH}" >> $GITHUB_OUTPUT
    #       echo "validation-timestamp=$(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_OUTPUT
          
    #     else
    #       echo "❌ Template validation failed after all retry attempts!"
    #       echo "⏱️ Validation failed at: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          
    #       # Comprehensive error analysis and reporting
    #       echo "::group::🔍 Detailed Error Analysis"
          
    #       if [[ -f validation-output/main-template-errors.log ]]; then
    #         echo "📄 Raw error output:"
    #         cat validation-output/main-template-errors.log
    #         echo ""
            
    #         # Extract and categorize different types of errors
    #         ERROR_CONTENT=$(cat validation-output/main-template-errors.log)
            
    #         # Try multiple methods to extract error messages
    #         ERROR_MESSAGE=""
            
    #         # Method 1: Extract JSON error message
    #         JSON_ERROR=$(echo "${ERROR_CONTENT}" | grep -o '"message":"[^"]*"' | sed 's/"message":"\([^"]*\)"/\1/' | head -1)
    #         if [[ -n "${JSON_ERROR}" ]]; then
    #           ERROR_MESSAGE="${JSON_ERROR}"
    #         fi
            
    #         # Method 2: Extract ValidationError
    #         if [[ -z "${ERROR_MESSAGE}" ]]; then
    #           VALIDATION_ERROR=$(echo "${ERROR_CONTENT}" | grep -o "ValidationError[^:]*: [^\\n]*" | head -1)
    #           if [[ -n "${VALIDATION_ERROR}" ]]; then
    #             ERROR_MESSAGE="${VALIDATION_ERROR}"
    #           fi
    #         fi
            
    #         # Method 3: Extract any error line
    #         if [[ -z "${ERROR_MESSAGE}" ]]; then
    #           ERROR_MESSAGE=$(echo "${ERROR_CONTENT}" | grep -i "error" | head -1)
    #         fi
            
    #         # Method 4: Use first non-empty line
    #         if [[ -z "${ERROR_MESSAGE}" ]]; then
    #           ERROR_MESSAGE=$(echo "${ERROR_CONTENT}" | grep -v "^$" | head -1)
    #         fi
            
    #         # Categorize error types for better user guidance
    #         if echo "${ERROR_CONTENT}" | grep -q "ValidationError"; then
    #           echo "🏷️ Error Type: Template Syntax/Structure Error"
    #           echo "💡 Suggestion: Check your CloudFormation template syntax and structure"
    #         elif echo "${ERROR_CONTENT}" | grep -q "AccessDenied\|UnauthorizedOperation"; then
    #           echo "🏷️ Error Type: AWS Authentication/Authorization Error"
    #           echo "💡 Suggestion: Check your AWS credentials and IAM permissions"
    #         elif echo "${ERROR_CONTENT}" | grep -q "InvalidUserID.NotFound"; then
    #           echo "🏷️ Error Type: AWS Account/User Error"
    #           echo "💡 Suggestion: Verify your AWS account configuration"
    #         elif echo "${ERROR_CONTENT}" | grep -q "RequestLimitExceeded\|Throttling"; then
    #           echo "🏷️ Error Type: AWS API Rate Limiting"
    #           echo "💡 Suggestion: The validation was rate limited, try again later"
    #         elif echo "${ERROR_CONTENT}" | grep -q "ServiceUnavailable\|InternalError"; then
    #           echo "🏷️ Error Type: AWS Service Error"
    #           echo "💡 Suggestion: AWS CloudFormation service may be experiencing issues"
    #         else
    #           echo "🏷️ Error Type: Unknown Error"
    #           echo "💡 Suggestion: Check the error details above for more information"
    #         fi
            
    #         # Create appropriate GitHub error annotation
    #         if [[ -n "${ERROR_MESSAGE}" ]]; then
    #           echo "::error title=CloudFormation Validation Failed::${ERROR_MESSAGE}"
    #         else
    #           echo "::error title=CloudFormation Validation Failed::Template validation failed. Check logs for details."
    #         fi
            
    #       else
    #         echo "❌ No error log file found"
    #         ERROR_MESSAGE="Template validation failed with no error details"
    #         echo "::error title=CloudFormation Validation Failed::${ERROR_MESSAGE}"
    #       fi
          
    #       echo "::endgroup::"
          
    #       # Set failure outputs
    #       echo "result=failure" >> $GITHUB_OUTPUT
    #       echo "template-path=${TEMPLATE_PATH}" >> $GITHUB_OUTPUT
    #       echo "error=${ERROR_MESSAGE:-"Template validation failed"}" >> $GITHUB_OUTPUT
    #       echo "validation-timestamp=$(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_OUTPUT
          
    #       exit 1
    #     fi

    # - name: Generate validation summary
    #   id: summary
    #   if: always()
    #   shell: bash
    #   run: |
    #     set -euo pipefail
        
    #     # Enable detailed logging
    #     echo "::group::🔧 Debug Information"
    #     echo "📊 Starting validation summary generation"
    #     echo "📅 Timestamp: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
    #     echo "🔧 Summary generation always runs regardless of previous step results"
    #     echo "::endgroup::"
        
    #     echo "📊 Generating comprehensive validation summary..."
        
    #     # Read validation results from previous steps with error handling
    #     echo "::group::📋 Collecting Validation Results"
        
    #     RESULT="${{ steps.validation.outputs.result }}"
    #     echo "🔍 Template validation result: ${RESULT:-"not available"}"
        
    #     # Get file paths with fallbacks
    #     TEMPLATE_PATH="${{ steps.validation.outputs.template-path }}"
    #     PARAMETERS_PATH="${{ steps.parameters-validation.outputs.parameters-path }}"
        
    #     echo "📄 Template path: ${TEMPLATE_PATH:-"not available"}"
    #     echo "📄 Parameters path: ${PARAMETERS_PATH:-"not available"}"
        
    #     # Get timestamps for tracking
    #     TIMESTAMP="${{ steps.validation.outputs.validation-timestamp }}"
        
    #     echo "⏱️ Template validation timestamp: ${MAIN_TIMESTAMP:-"not available"}"
        
    #     echo "::endgroup::"
        
    #     # Determine overall validation result with comprehensive logic
    #     echo "::group::🎯 Validation Result"
        
    #     OVERALL_RESULT="success"
    #     FAILURE_REASONS=()
        
    #     echo "🎯 Validation Result: ${OVERALL_RESULT}"
    #     if [[ ${#FAILURE_REASONS[@]} -gt 0 ]]; then
    #       echo "📋 Failure reasons:"
    #       for reason in "${FAILURE_REASONS[@]}"; do
    #         echo "  - ${reason}"
    #       done
    #     fi
        
    #     echo "::endgroup::"
        
    #     # Generate status indicators with error handling
    #     get_status_indicator() {
    #       case "$1" in
    #         "success") echo "✅" ;;
    #         "failure") echo "❌" ;;
    #         "skipped") echo "⏭️" ;;
    #         "") echo "❓" ;;
    #         *) echo "❓" ;;
    #       esac
    #     }
        
    #     ICON=$(get_status_indicator "${RESULT}")
        
    #     echo "🎨 Status icons: Main=${MAIN_ICON}, Nested=${NESTED_ICON}, Parameters=${PARAMETERS_ICON}, Overall=${OVERALL_ICON}"
        
    #     # Validate that GITHUB_STEP_SUMMARY is available
    #     if [[ -z "${GITHUB_STEP_SUMMARY:-}" ]]; then
    #       echo "::warning::GITHUB_STEP_SUMMARY environment variable is not set, summary will not be displayed"
    #       echo "📄 Summary would have been written to GitHub step summary"
    #     else
    #       echo "📝 Writing summary to: ${GITHUB_STEP_SUMMARY}"
    #     fi
        
    #     # Create comprehensive markdown summary for GitHub step summary
    #     echo "::group::📝 Generating Markdown Summary"
        
    #     # Function to safely write to step summary
    #     write_to_summary() {
    #       if [[ -n "${GITHUB_STEP_SUMMARY:-}" ]]; then
    #         cat >> "$GITHUB_STEP_SUMMARY"
    #       else
    #         echo "Summary content (would be written to GitHub step summary):"
    #         cat
    #       fi
    #     }
        
    #     # Generate the main summary
    #     write_to_summary << EOF
    #       # ${OVERALL_ICON} CloudFormation Validation Summary

    #       ## Overall Result: **${OVERALL_RESULT^^}**

    #       $(if [[ ${#FAILURE_REASONS[@]} -gt 0 ]]; then
    #         echo "### ❌ Failure Summary"
    #         for reason in "${FAILURE_REASONS[@]}"; do
    #           echo "- ${reason}"
    #         done
    #         echo ""
    #       fi)

    #       | Validation Type | Status | Result | Details |
    #       |---|---|---|---|
    #       | **CloudFormation Template** | ${ICON} | **${RESULT^^}** | \`${TEMPLATE_PATH:-"N/A"}\` |


    #       ---

    #       ## Validation Details

    #       ### ${MAIN_ICON} Main Template Validation
    #       - **File**: \`${TEMPLATE_PATH:-"Not specified"}\`
    #       - **Status**: ${RESULT^^}
    #       $(if [[ -n "${MAIN_TIMESTAMP}" ]]; then echo "- **Timestamp**: ${MAIN_TIMESTAMP}"; fi)
    #       EOF
                  
    #               # Add main template error details if failed
    #               if [[ "${RESULT}" == "failure" ]]; then
    #                 MAIN_ERROR="${{ steps.validation.outputs.error }}"
    #                 write_to_summary << EOF
    #       - **Error**: ${MAIN_ERROR:-"Unknown error"}
    #       EOF
    #     fi
        
    #     # Add nested templates details with comprehensive information
    #     write_to_summary << EOF

    #     ### ${NESTED_ICON} Nested Templates Validation
    #     - **Status**: ${NESTED_RESULT^^}
    #     $(if [[ -n "${NESTED_TIMESTAMP}" ]]; then echo "- **Timestamp**: ${NESTED_TIMESTAMP}"; fi)
    #     EOF
                
    #             if [[ "${NESTED_RESULT}" == "success" ]]; then
    #               VALIDATED_COUNT="${{ steps.nested-validation.outputs.validated-count }}"
    #               SKIPPED_COUNT="${{ steps.nested-validation.outputs.skipped-count }}"
    #               write_to_summary << EOF
    #     - **Templates Validated**: ${VALIDATED_COUNT:-"0"}
    #     $(if [[ -n "${SKIPPED_COUNT}" ]] && [[ "${SKIPPED_COUNT}" != "0" ]]; then echo "- **Templates Skipped**: ${SKIPPED_COUNT}"; fi)
    #     - **Result**: All nested templates validated successfully
    #     EOF
    #             elif [[ "${NESTED_RESULT}" == "failure" ]]; then
    #               VALIDATED_COUNT="${{ steps.nested-validation.outputs.validated-count }}"
    #               FAILED_COUNT="${{ steps.nested-validation.outputs.failed-count }}"
    #               SKIPPED_COUNT="${{ steps.nested-validation.outputs.skipped-count }}"
    #               FAILED_TEMPLATES="${{ steps.nested-validation.outputs.failed-templates }}"
    #               write_to_summary << EOF
    #     - **Templates Validated**: ${VALIDATED_COUNT:-"0"}
    #     - **Templates Failed**: ${FAILED_COUNT:-"0"}
    #     $(if [[ -n "${SKIPPED_COUNT}" ]] && [[ "${SKIPPED_COUNT}" != "0" ]]; then echo "- **Templates Skipped**: ${SKIPPED_COUNT}"; fi)
    #     - **Failed Templates**: ${FAILED_TEMPLATES:-"Unknown"}
    #     EOF
    #             else
    #               NESTED_MESSAGE="${{ steps.nested-validation.outputs.message }}"
    #               write_to_summary << EOF
    #     - **Result**: ${NESTED_MESSAGE:-"Nested templates validation was skipped"}
    #     EOF
    #             fi
                
    #             # Add parameters file details with comprehensive information
    #             write_to_summary << EOF

    #     ### ${PARAMETERS_ICON} Parameters File Validation
    #     - **File**: \`${PARAMETERS_PATH:-"Not specified"}\`
    #     - **Status**: ${PARAMETERS_RESULT^^}
    #     $(if [[ -n "${PARAMETERS_TIMESTAMP}" ]]; then echo "- **Timestamp**: ${PARAMETERS_TIMESTAMP}"; fi)
    #     EOF
                
    #             if [[ "${PARAMETERS_RESULT}" == "success" ]]; then
    #               PARAM_COUNT="${{ steps.parameters-validation.outputs.parameters-count }}"
    #               PARAM_KEYS="${{ steps.parameters-validation.outputs.parameter-keys }}"
    #               write_to_summary << EOF
    #     - **Parameters Count**: ${PARAM_COUNT:-"0"}
    #     EOF
    #               if [[ -n "${PARAM_KEYS}" ]] && [[ "${PARAM_KEYS}" != "" ]]; then
    #                 # Truncate parameter keys if too long for summary
    #                 if [[ ${#PARAM_KEYS} -gt 200 ]]; then
    #                   TRUNCATED_KEYS="${PARAM_KEYS:0:200}..."
    #                   write_to_summary << EOF
    #     - **Parameter Keys**: ${TRUNCATED_KEYS}
    #     EOF
    #                 else
    #                   write_to_summary << EOF
    #     - **Parameter Keys**: ${PARAM_KEYS}
    #     EOF
    #                 fi
    #               fi
    #             elif [[ "${PARAMETERS_RESULT}" == "failure" ]]; then
    #               PARAM_ERROR="${{ steps.parameters-validation.outputs.error }}"
    #               write_to_summary << EOF
    #     - **Error**: ${PARAM_ERROR:-"Unknown error"}
    #     EOF
    #             else
    #               PARAM_MESSAGE="${{ steps.parameters-validation.outputs.message }}"
    #               write_to_summary << EOF
    #     - **Result**: ${PARAM_MESSAGE:-"Parameters validation was skipped"}
    #     EOF
    #             fi
                
    #             # Add comprehensive footer with artifact and configuration information
    #             write_to_summary << EOF

    #     ---

    #     ## 📁 Artifacts

    #     Detailed validation results and logs have been uploaded as artifacts:
    #     - **Artifact Name**: \`cloudformation-validation-results-${{ github.run_id }}\`
    #     - **Retention**: 30 days
    #     - **Contents**: Validation output files, error logs, and detailed results

    #     ## 🔧 Action Configuration

    #     | Input | Value |
    #     |---|---|
    #     | **CloudFormation Directory** | \`${{ inputs.cloudformation-dir }}\` |
    #     | **Template File** | \`${{ inputs.template-file }}\` |
    #     | **AWS Region** | \`${{ inputs.aws-region }}\` |
    #     | **AWS Role ARN** | \`${{ inputs.aws-role-arn }}\` |

    #     ## 📊 Execution Summary

    #     - **Workflow Run ID**: ${{ github.run_id }}
    #     - **Summary Generated**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')
    #     - **Repository**: ${{ github.repository }}
    #     - **Branch/Ref**: ${{ github.ref }}

    #     $(if [[ "${OVERALL_RESULT}" == "failure" ]]; then
    #       echo "## 🔧 Troubleshooting"
    #       echo ""
    #       echo "The validation failed. Check the detailed logs above and the uploaded artifacts for more information."
    #       echo ""
    #       echo "### Common Issues:"
    #       echo "- **Template Syntax Errors**: Check your CloudFormation template syntax"
    #       echo "- **AWS Authentication**: Verify your AWS credentials and IAM permissions"
    #       echo "- **File Paths**: Ensure template and parameter files exist at the specified paths"
    #       echo "- **JSON Format**: Verify parameters file is valid JSON with correct structure"
    #     fi)
    #     EOF
        
    #     echo "✅ Markdown summary generated successfully"
    #     echo "::endgroup::"
        
    #     # Set output for overall validation result with error handling
    #     echo "::group::📤 Setting Outputs"
        
    #     if [[ -n "${GITHUB_OUTPUT:-}" ]]; then
    #       echo "validation-result=${OVERALL_RESULT}" >> "$GITHUB_OUTPUT"
    #       echo "summary-timestamp=$(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> "$GITHUB_OUTPUT"
    #       echo "failure-count=${#FAILURE_REASONS[@]}" >> "$GITHUB_OUTPUT"
          
    #       # Export failure reasons as a comma-separated string
    #       if [[ ${#FAILURE_REASONS[@]} -gt 0 ]]; then
    #         IFS=','
    #         FAILURE_REASONS_STR="${FAILURE_REASONS[*]}"
    #         unset IFS
    #         echo "failure-reasons=${FAILURE_REASONS_STR}" >> "$GITHUB_OUTPUT"
    #       fi
          
    #       echo "✅ Outputs set successfully"
    #     else
    #       echo "::warning::GITHUB_OUTPUT environment variable is not set"
    #       echo "📤 Would have set validation-result=${OVERALL_RESULT}"
    #     fi
        
    #     echo "::endgroup::"
        
    #     # Final status report
    #     if [[ "${OVERALL_RESULT}" == "success" ]]; then
    #       echo "🎉 Validation summary generated successfully! All validations passed."
    #     else
    #       echo "📋 Validation summary generated successfully. Some validations failed - check details above."
    #     fi
        
    #     echo "⏱️ Summary generation completed at: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"

    # - name: Upload validation artifacts
    #   uses: actions/upload-artifact@v4
    #   if: always()
    #   with:
    #     name: cloudformation-validation-results-${{ github.run_id }}
    #     path: |
    #       validation-output/
    #     retention-days: 30
    #     compression-level: 6
    #     if-no-files-found: warn
    #   env:
    #     # Ensure artifact upload has proper timeout and retry behavior
    #     ACTIONS_STEP_DEBUG: ${{ runner.debug }}
    #   continue-on-error: true
    #   id: upload-artifacts
      
    # - name: Verify artifact upload
    #   if: always()
    #   shell: bash
    #   run: |
    #     set -euo pipefail
        
    #     echo "::group::📁 Artifact Upload Verification"
    #     echo "🔍 Verifying artifact upload status"
    #     echo "📅 Timestamp: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
        
    #     # Check if validation-output directory exists and has content
    #     if [[ -d "validation-output" ]]; then
    #       echo "✅ Validation output directory exists"
          
    #       # Count files in validation-output
    #       FILE_COUNT=$(find validation-output -type f | wc -l | tr -d ' ')
    #       echo "📊 Total files in validation-output: ${FILE_COUNT}"
          
    #       if [[ "${FILE_COUNT}" -gt 0 ]]; then
    #         echo "📋 Validation output contents:"
    #         find validation-output -type f -exec ls -lh {} \; | sed 's/^/  /'
            
    #         # Calculate total size
    #         TOTAL_SIZE=$(du -sh validation-output 2>/dev/null | cut -f1 || echo "unknown")
    #         echo "📏 Total validation output size: ${TOTAL_SIZE}"
            
    #         # Show directory structure
    #         echo "🌳 Directory structure:"
    #         tree validation-output 2>/dev/null || find validation-output -type d | sed 's/^/  /' || echo "  Unable to show directory structure"
            
    #       else
    #         echo "⚠️ Warning: Validation output directory is empty"
    #         echo "::warning::No validation output files were generated"
    #       fi
    #     else
    #       echo "❌ Validation output directory does not exist"
    #       echo "::warning::Validation output directory was not created"
    #     fi
        
    #     # Check artifact upload step result
    #     UPLOAD_OUTCOME="${{ steps.upload-artifacts.outcome }}"
    #     echo "📤 Artifact upload outcome: ${UPLOAD_OUTCOME:-"not available"}"
        
    #     case "${UPLOAD_OUTCOME}" in
    #       "success")
    #         echo "✅ Artifacts uploaded successfully"
    #         echo "🔗 Artifact name: cloudformation-validation-results-${{ github.run_id }}"
    #         echo "⏳ Retention: 30 days"
    #         ;;
    #       "failure")
    #         echo "❌ Artifact upload failed"
    #         echo "::error::Failed to upload validation artifacts"
    #         ;;
    #       "skipped")
    #         echo "⏭️ Artifact upload was skipped"
    #         echo "::warning::Artifact upload was skipped"
    #         ;;
    #       *)
    #         echo "❓ Unknown artifact upload status: ${UPLOAD_OUTCOME}"
    #         echo "::warning::Unknown artifact upload status"
    #         ;;
    #     esac
        
    #     # Provide guidance for accessing artifacts
    #     if [[ "${UPLOAD_OUTCOME}" == "success" ]]; then
    #       echo ""
    #       echo "💡 To access the uploaded artifacts:"
    #       echo "  1. Go to the Actions tab in your GitHub repository"
    #       echo "  2. Click on this workflow run"
    #       echo "  3. Scroll down to the 'Artifacts' section"
    #       echo "  4. Download 'cloudformation-validation-results-${{ github.run_id }}'"
    #     fi
        
    #     echo "::endgroup::"
