name: 'CloudFormation Template Validator'
description: 'Validates CloudFormation templates with comprehensive error reporting and artifact generation. Requires repository checkout and AWS credentials to be configured by the caller workflow.'
author: 'Subhamay Bhattacharyya'

inputs:
  cloudformation-dir:
    description: 'Directory containing CloudFormation templates'
    required: false
    default: '.'
  template-file:
    description: 'Main CloudFormation template filename'
    required: false
    default: 'template.yaml'
  aws-region:
    description: 'AWS region for validation'
    required: false
    default: 'us-east-1'
  aws-role-arn:
    description: 'AWS IAM role ARN for authentication'
    required: true
  github-token:
    description: 'GitHub token for artifact upload'
    required: false
    default: ${{ github.token }}

outputs:
  validation-result:
    description: 'Overall validation result (success/failure)'
    value: ${{ steps.validate-cloudformation-template.outputs.validation-result }}

runs:
  using: 'composite'
  steps:

    - name: Print Inputs for Debugging
      id: print-inputs
      shell: bash
      working-directory: ${{ github.workspace }}
      run: |
        set -euo pipefail

        TEMPLATE_DIR="${{ inputs.cloudformation-dir }}"
        TEMPLATE_FILE="${{ inputs.template-file }}"

        echo "::group::üîß Debug Information"
        echo "üîç Starting CloudFormation template validation"
        echo "üìÖ Timestamp                : $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
        echo "üìÅ Working Directory        : $(pwd)"
        echo "üìÅ CloudFormation Directory : $TEMPLATE_DIR"
        echo "üìÅ Template file            : $TEMPLATE_FILE"
        echo "üåç AWS Region               : ${{ inputs.aws-region }}"
        echo "üîë AWS CLI Version          : $(aws --version 2>&1 || echo 'AWS CLI not available')"
        echo "::endgroup::"

    - name: Validate CloudFormation directory and template
      id: validate-directory-template
      shell: bash
      working-directory: ${{ github.workspace }}
      run: |
        set -euo pipefail

        TEMPLATE_DIR="${{ inputs.cloudformation-dir }}"
        TEMPLATE_FILE="${{ inputs.template-file }}"

        # Use template-file directly if it includes a slash or is absolute
        if [[ "$TEMPLATE_FILE" = /* || "$TEMPLATE_FILE" == *"/"* ]]; then
          FULL_TEMPLATE_PATH="$TEMPLATE_FILE"
        else
          FULL_TEMPLATE_PATH="${TEMPLATE_DIR}/${TEMPLATE_FILE}"
        fi

        echo "üìÅ Resolved template path: $FULL_TEMPLATE_PATH"

        if [[ ! -d "$TEMPLATE_DIR" ]]; then
          echo "::error::CloudFormation directory not found: $TEMPLATE_DIR"
          echo "result=failure" >> "$GITHUB_OUTPUT"
          exit 1
        fi

        if [[ ! -f "$FULL_TEMPLATE_PATH" ]]; then
          echo "::error::Template file not found: $FULL_TEMPLATE_PATH"
          ls -la "$TEMPLATE_DIR" || echo "Unable to list directory"
          echo "result=failure" >> "$GITHUB_OUTPUT"
          exit 1
        fi

        if [[ ! -r "$FULL_TEMPLATE_PATH" ]]; then
          echo "::error::Template file is not readable: $FULL_TEMPLATE_PATH"
          echo "result=failure" >> "$GITHUB_OUTPUT"
          exit 1
        fi

        FILE_SIZE=$(stat -c%s "$FULL_TEMPLATE_PATH" 2>/dev/null || stat -f%z "$FULL_TEMPLATE_PATH" 2>/dev/null || echo "0")
        MAX_SIZE=51200

        if [[ "$FILE_SIZE" -eq 0 ]]; then
          echo "::error::Template file is empty: $FULL_TEMPLATE_PATH"
          echo "result=failure" >> "$GITHUB_OUTPUT"
          exit 1
        fi

        if [[ "$FILE_SIZE" -gt "$MAX_SIZE" ]]; then
          echo "::error::Template size exceeds the 51,200 byte limit for --template-body. Current size: $FILE_SIZE bytes"
          echo "result=failure" >> "$GITHUB_OUTPUT"
          exit 1
        fi

        echo "‚úÖ Template file found: $FULL_TEMPLATE_PATH"
        echo "üìè Template file size: ${FILE_SIZE} bytes"

        echo "::group::üìÑ Template File Preview (first 10 lines)"
        head -10 "$FULL_TEMPLATE_PATH" || echo "Unable to preview template"
        echo "::endgroup::"

    - name: Validate the CloudFormation template
      id: validate-cloudformation-template
      shell: bash
      working-directory: ${{ github.workspace }}
      run: |
        set -euo pipefail

        TEMPLATE_DIR="${{ inputs.cloudformation-dir }}"
        TEMPLATE_FILE="${{ inputs.template-file }}"

        # Use template-file directly if it includes a slash or is absolute
        if [[ "$TEMPLATE_FILE" = /* || "$TEMPLATE_FILE" == *"/"* ]]; then
          FULL_TEMPLATE_PATH="$TEMPLATE_FILE"
        else
          FULL_TEMPLATE_PATH="${TEMPLATE_DIR}/${TEMPLATE_FILE}"
        fi

        OUTPUT_DIR="${TEMPLATE_DIR}/validation-output"

        mkdir -p "$OUTPUT_DIR"

        echo "üîé Running CloudFormation validate-template on $FULL_TEMPLATE_PATH"

        aws cloudformation validate-template \
          --template-body "file://$FULL_TEMPLATE_PATH" \
          --region "${{ inputs.aws-region }}" \
          --output json \
          > "$OUTPUT_DIR/template-validation.json" \
          2> "$OUTPUT_DIR/template-errors.log"

        VALIDATION_EXIT_CODE=$?

        if [[ $VALIDATION_EXIT_CODE -ne 0 ]]; then
          exit $VALIDATION_EXIT_CODE
        fi

    - name: Validation summary
      id: summary
      if: always()
      shell: bash
      working-directory: ${{ github.workspace }}
      run: |
        set -euo pipefail

        TEMPLATE_DIR="${{ inputs.cloudformation-dir }}"
        OUTPUT_DIR="${TEMPLATE_DIR}/validation-output"
        SUMMARY_FILE_SUCCESS="${OUTPUT_DIR}/template-validation.json"
        SUMMARY_FILE_ERRORS="${OUTPUT_DIR}/template-errors.log"

        echo "::group::üìä Validation Summary"
        echo "üìÖ Timestamp: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
        echo "üìÅ Output Directory: $OUTPUT_DIR"

        SUMMARY_MARKDOWN="### üìä CloudFormation Template Validation Summary\n\n"

        if [[ -s "$SUMMARY_FILE_SUCCESS" ]]; then
          SUMMARY_MARKDOWN+="‚úÖ **Validation Passed**\n\n"
          SUMMARY_MARKDOWN+="<details><summary>üìÑ Validation Output (click to expand)</summary>\n\n\`\`\`json\n"
          SUMMARY_MARKDOWN+="$(cat "$SUMMARY_FILE_SUCCESS")"
          SUMMARY_MARKDOWN+="\n\`\`\`\n</details>\n"
          echo "validation-result=success" >> "$GITHUB_OUTPUT"

        elif [[ -s "$SUMMARY_FILE_ERRORS" ]]; then
          SUMMARY_MARKDOWN+="‚ùå **Validation Failed**\n\n"
          SUMMARY_MARKDOWN+="<details><summary>üö´ Error Log (click to expand)</summary>\n\n\`\`\`text\n"
          SUMMARY_MARKDOWN+="$(cat "$SUMMARY_FILE_ERRORS")"
          SUMMARY_MARKDOWN+="\n\`\`\`\n</details>\n"
          echo "va


        
    #     echo "üìä Generating comprehensive validation summary..."
        
    #     # Read validation results from previous steps with error handling
    #     echo "::group::üìã Collecting Validation Results"
        
    #     RESULT="${{ steps.validation.outputs.result }}"
    #     echo "üîç Template validation result: ${RESULT:-"not available"}"
        
    #     # Get file paths with fallbacks
    #     TEMPLATE_PATH="${{ steps.validation.outputs.template-path }}"
    #     PARAMETERS_PATH="${{ steps.parameters-validation.outputs.parameters-path }}"
        
    #     echo "üìÑ Template path: ${TEMPLATE_PATH:-"not available"}"
    #     echo "üìÑ Parameters path: ${PARAMETERS_PATH:-"not available"}"
        
    #     # Get timestamps for tracking
    #     TIMESTAMP="${{ steps.validation.outputs.validation-timestamp }}"
        
    #     echo "‚è±Ô∏è Template validation timestamp: ${MAIN_TIMESTAMP:-"not available"}"
        
    #     echo "::endgroup::"
        
    #     # Determine overall validation result with comprehensive logic
    #     echo "::group::üéØ Validation Result"
        
    #     OVERALL_RESULT="success"
    #     FAILURE_REASONS=()
        
    #     echo "üéØ Validation Result: ${OVERALL_RESULT}"
    #     if [[ ${#FAILURE_REASONS[@]} -gt 0 ]]; then
    #       echo "üìã Failure reasons:"
    #       for reason in "${FAILURE_REASONS[@]}"; do
    #         echo "  - ${reason}"
    #       done
    #     fi
        
    #     echo "::endgroup::"
        
    #     # Generate status indicators with error handling
    #     get_status_indicator() {
    #       case "$1" in
    #         "success") echo "‚úÖ" ;;
    #         "failure") echo "‚ùå" ;;
    #         "skipped") echo "‚è≠Ô∏è" ;;
    #         "") echo "‚ùì" ;;
    #         *) echo "‚ùì" ;;
    #       esac
    #     }
        
    #     ICON=$(get_status_indicator "${RESULT}")
        
    #     echo "üé® Status icons: Main=${MAIN_ICON}, Nested=${NESTED_ICON}, Parameters=${PARAMETERS_ICON}, Overall=${OVERALL_ICON}"
        
    #     # Validate that GITHUB_STEP_SUMMARY is available
    #     if [[ -z "${GITHUB_STEP_SUMMARY:-}" ]]; then
    #       echo "::warning::GITHUB_STEP_SUMMARY environment variable is not set, summary will not be displayed"
    #       echo "üìÑ Summary would have been written to GitHub step summary"
    #     else
    #       echo "üìù Writing summary to: ${GITHUB_STEP_SUMMARY}"
    #     fi
        
    #     # Create comprehensive markdown summary for GitHub step summary
    #     echo "::group::üìù Generating Markdown Summary"
        
    #     # Function to safely write to step summary
    #     write_to_summary() {
    #       if [[ -n "${GITHUB_STEP_SUMMARY:-}" ]]; then
    #         cat >> "$GITHUB_STEP_SUMMARY"
    #       else
    #         echo "Summary content (would be written to GitHub step summary):"
    #         cat
    #       fi
    #     }
        
    #     # Generate the main summary
    #     write_to_summary << EOF
    #       # ${OVERALL_ICON} CloudFormation Validation Summary

    #       ## Overall Result: **${OVERALL_RESULT^^}**

    #       $(if [[ ${#FAILURE_REASONS[@]} -gt 0 ]]; then
    #         echo "### ‚ùå Failure Summary"
    #         for reason in "${FAILURE_REASONS[@]}"; do
    #           echo "- ${reason}"
    #         done
    #         echo ""
    #       fi)

    #       | Validation Type | Status | Result | Details |
    #       |---|---|---|---|
    #       | **CloudFormation Template** | ${ICON} | **${RESULT^^}** | \`${TEMPLATE_PATH:-"N/A"}\` |


    #       ---

    #       ## Validation Details

    #       ### ${MAIN_ICON} Main Template Validation
    #       - **File**: \`${TEMPLATE_PATH:-"Not specified"}\`
    #       - **Status**: ${RESULT^^}
    #       $(if [[ -n "${MAIN_TIMESTAMP}" ]]; then echo "- **Timestamp**: ${MAIN_TIMESTAMP}"; fi)
    #       EOF
                  
    #               # Add main template error details if failed
    #               if [[ "${RESULT}" == "failure" ]]; then
    #                 MAIN_ERROR="${{ steps.validation.outputs.error }}"
    #                 write_to_summary << EOF
    #       - **Error**: ${MAIN_ERROR:-"Unknown error"}
    #       EOF
    #     fi
        
    #     # Add nested templates details with comprehensive information
    #     write_to_summary << EOF

    #     ### ${NESTED_ICON} Nested Templates Validation
    #     - **Status**: ${NESTED_RESULT^^}
    #     $(if [[ -n "${NESTED_TIMESTAMP}" ]]; then echo "- **Timestamp**: ${NESTED_TIMESTAMP}"; fi)
    #     EOF
                
    #             if [[ "${NESTED_RESULT}" == "success" ]]; then
    #               VALIDATED_COUNT="${{ steps.nested-validation.outputs.validated-count }}"
    #               SKIPPED_COUNT="${{ steps.nested-validation.outputs.skipped-count }}"
    #               write_to_summary << EOF
    #     - **Templates Validated**: ${VALIDATED_COUNT:-"0"}
    #     $(if [[ -n "${SKIPPED_COUNT}" ]] && [[ "${SKIPPED_COUNT}" != "0" ]]; then echo "- **Templates Skipped**: ${SKIPPED_COUNT}"; fi)
    #     - **Result**: All nested templates validated successfully
    #     EOF
    #             elif [[ "${NESTED_RESULT}" == "failure" ]]; then
    #               VALIDATED_COUNT="${{ steps.nested-validation.outputs.validated-count }}"
    #               FAILED_COUNT="${{ steps.nested-validation.outputs.failed-count }}"
    #               SKIPPED_COUNT="${{ steps.nested-validation.outputs.skipped-count }}"
    #               FAILED_TEMPLATES="${{ steps.nested-validation.outputs.failed-templates }}"
    #               write_to_summary << EOF
    #     - **Templates Validated**: ${VALIDATED_COUNT:-"0"}
    #     - **Templates Failed**: ${FAILED_COUNT:-"0"}
    #     $(if [[ -n "${SKIPPED_COUNT}" ]] && [[ "${SKIPPED_COUNT}" != "0" ]]; then echo "- **Templates Skipped**: ${SKIPPED_COUNT}"; fi)
    #     - **Failed Templates**: ${FAILED_TEMPLATES:-"Unknown"}
    #     EOF
    #             else
    #               NESTED_MESSAGE="${{ steps.nested-validation.outputs.message }}"
    #               write_to_summary << EOF
    #     - **Result**: ${NESTED_MESSAGE:-"Nested templates validation was skipped"}
    #     EOF
    #             fi
                
    #             # Add parameters file details with comprehensive information
    #             write_to_summary << EOF

    #     ### ${PARAMETERS_ICON} Parameters File Validation
    #     - **File**: \`${PARAMETERS_PATH:-"Not specified"}\`
    #     - **Status**: ${PARAMETERS_RESULT^^}
    #     $(if [[ -n "${PARAMETERS_TIMESTAMP}" ]]; then echo "- **Timestamp**: ${PARAMETERS_TIMESTAMP}"; fi)
    #     EOF
                
    #             if [[ "${PARAMETERS_RESULT}" == "success" ]]; then
    #               PARAM_COUNT="${{ steps.parameters-validation.outputs.parameters-count }}"
    #               PARAM_KEYS="${{ steps.parameters-validation.outputs.parameter-keys }}"
    #               write_to_summary << EOF
    #     - **Parameters Count**: ${PARAM_COUNT:-"0"}
    #     EOF
    #               if [[ -n "${PARAM_KEYS}" ]] && [[ "${PARAM_KEYS}" != "" ]]; then
    #                 # Truncate parameter keys if too long for summary
    #                 if [[ ${#PARAM_KEYS} -gt 200 ]]; then
    #                   TRUNCATED_KEYS="${PARAM_KEYS:0:200}..."
    #                   write_to_summary << EOF
    #     - **Parameter Keys**: ${TRUNCATED_KEYS}
    #     EOF
    #                 else
    #                   write_to_summary << EOF
    #     - **Parameter Keys**: ${PARAM_KEYS}
    #     EOF
    #                 fi
    #               fi
    #             elif [[ "${PARAMETERS_RESULT}" == "failure" ]]; then
    #               PARAM_ERROR="${{ steps.parameters-validation.outputs.error }}"
    #               write_to_summary << EOF
    #     - **Error**: ${PARAM_ERROR:-"Unknown error"}
    #     EOF
    #             else
    #               PARAM_MESSAGE="${{ steps.parameters-validation.outputs.message }}"
    #               write_to_summary << EOF
    #     - **Result**: ${PARAM_MESSAGE:-"Parameters validation was skipped"}
    #     EOF
    #             fi
                
    #             # Add comprehensive footer with artifact and configuration information
    #             write_to_summary << EOF

    #     ---

    #     ## üìÅ Artifacts

    #     Detailed validation results and logs have been uploaded as artifacts:
    #     - **Artifact Name**: \`cloudformation-validation-results-${{ github.run_id }}\`
    #     - **Retention**: 30 days
    #     - **Contents**: Validation output files, error logs, and detailed results

    #     ## üîß Action Configuration

    #     | Input | Value |
    #     |---|---|
    #     | **CloudFormation Directory** | \`${{ inputs.cloudformation-dir }}\` |
    #     | **Template File** | \`${{ inputs.template-file }}\` |
    #     | **AWS Region** | \`${{ inputs.aws-region }}\` |
    #     | **AWS Role ARN** | \`${{ inputs.aws-role-arn }}\` |

    #     ## üìä Execution Summary

    #     - **Workflow Run ID**: ${{ github.run_id }}
    #     - **Summary Generated**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')
    #     - **Repository**: ${{ github.repository }}
    #     - **Branch/Ref**: ${{ github.ref }}

    #     $(if [[ "${OVERALL_RESULT}" == "failure" ]]; then
    #       echo "## üîß Troubleshooting"
    #       echo ""
    #       echo "The validation failed. Check the detailed logs above and the uploaded artifacts for more information."
    #       echo ""
    #       echo "### Common Issues:"
    #       echo "- **Template Syntax Errors**: Check your CloudFormation template syntax"
    #       echo "- **AWS Authentication**: Verify your AWS credentials and IAM permissions"
    #       echo "- **File Paths**: Ensure template and parameter files exist at the specified paths"
    #       echo "- **JSON Format**: Verify parameters file is valid JSON with correct structure"
    #     fi)
    #     EOF
        
    #     echo "‚úÖ Markdown summary generated successfully"
    #     echo "::endgroup::"
        
    #     # Set output for overall validation result with error handling
    #     echo "::group::üì§ Setting Outputs"
        
    #     if [[ -n "${GITHUB_OUTPUT:-}" ]]; then
    #       echo "validation-result=${OVERALL_RESULT}" >> "$GITHUB_OUTPUT"
    #       echo "summary-timestamp=$(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> "$GITHUB_OUTPUT"
    #       echo "failure-count=${#FAILURE_REASONS[@]}" >> "$GITHUB_OUTPUT"
          
    #       # Export failure reasons as a comma-separated string
    #       if [[ ${#FAILURE_REASONS[@]} -gt 0 ]]; then
    #         IFS=','
    #         FAILURE_REASONS_STR="${FAILURE_REASONS[*]}"
    #         unset IFS
    #         echo "failure-reasons=${FAILURE_REASONS_STR}" >> "$GITHUB_OUTPUT"
    #       fi
          
    #       echo "‚úÖ Outputs set successfully"
    #     else
    #       echo "::warning::GITHUB_OUTPUT environment variable is not set"
    #       echo "üì§ Would have set validation-result=${OVERALL_RESULT}"
    #     fi
        
    #     echo "::endgroup::"
        
    #     # Final status report
    #     if [[ "${OVERALL_RESULT}" == "success" ]]; then
    #       echo "üéâ Validation summary generated successfully! All validations passed."
    #     else
    #       echo "üìã Validation summary generated successfully. Some validations failed - check details above."
    #     fi
        
    #     echo "‚è±Ô∏è Summary generation completed at: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"

    # - name: Upload validation artifacts
    #   uses: actions/upload-artifact@v4
    #   if: always()
    #   with:
    #     name: cloudformation-validation-results-${{ github.run_id }}
    #     path: |
    #       validation-output/
    #     retention-days: 30
    #     compression-level: 6
    #     if-no-files-found: warn
    #   env:
    #     # Ensure artifact upload has proper timeout and retry behavior
    #     ACTIONS_STEP_DEBUG: ${{ runner.debug }}
    #   continue-on-error: true
    #   id: upload-artifacts
      
    # - name: Verify artifact upload
    #   if: always()
    #   shell: bash
    #   run: |
    #     set -euo pipefail
        
    #     echo "::group::üìÅ Artifact Upload Verification"
    #     echo "üîç Verifying artifact upload status"
    #     echo "üìÖ Timestamp: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
        
    #     # Check if validation-output directory exists and has content
    #     if [[ -d "validation-output" ]]; then
    #       echo "‚úÖ Validation output directory exists"
          
    #       # Count files in validation-output
    #       FILE_COUNT=$(find validation-output -type f | wc -l | tr -d ' ')
    #       echo "üìä Total files in validation-output: ${FILE_COUNT}"
          
    #       if [[ "${FILE_COUNT}" -gt 0 ]]; then
    #         echo "üìã Validation output contents:"
    #         find validation-output -type f -exec ls -lh {} \; | sed 's/^/  /'
            
    #         # Calculate total size
    #         TOTAL_SIZE=$(du -sh validation-output 2>/dev/null | cut -f1 || echo "unknown")
    #         echo "üìè Total validation output size: ${TOTAL_SIZE}"
            
    #         # Show directory structure
    #         echo "üå≥ Directory structure:"
    #         tree validation-output 2>/dev/null || find validation-output -type d | sed 's/^/  /' || echo "  Unable to show directory structure"
            
    #       else
    #         echo "‚ö†Ô∏è Warning: Validation output directory is empty"
    #         echo "::warning::No validation output files were generated"
    #       fi
    #     else
    #       echo "‚ùå Validation output directory does not exist"
    #       echo "::warning::Validation output directory was not created"
    #     fi
        
    #     # Check artifact upload step result
    #     UPLOAD_OUTCOME="${{ steps.upload-artifacts.outcome }}"
    #     echo "üì§ Artifact upload outcome: ${UPLOAD_OUTCOME:-"not available"}"
        
    #     case "${UPLOAD_OUTCOME}" in
    #       "success")
    #         echo "‚úÖ Artifacts uploaded successfully"
    #         echo "üîó Artifact name: cloudformation-validation-results-${{ github.run_id }}"
    #         echo "‚è≥ Retention: 30 days"
    #         ;;
    #       "failure")
    #         echo "‚ùå Artifact upload failed"
    #         echo "::error::Failed to upload validation artifacts"
    #         ;;
    #       "skipped")
    #         echo "‚è≠Ô∏è Artifact upload was skipped"
    #         echo "::warning::Artifact upload was skipped"
    #         ;;
    #       *)
    #         echo "‚ùì Unknown artifact upload status: ${UPLOAD_OUTCOME}"
    #         echo "::warning::Unknown artifact upload status"
    #         ;;
    #     esac
        
    #     # Provide guidance for accessing artifacts
    #     if [[ "${UPLOAD_OUTCOME}" == "success" ]]; then
    #       echo ""
    #       echo "üí° To access the uploaded artifacts:"
    #       echo "  1. Go to the Actions tab in your GitHub repository"
    #       echo "  2. Click on this workflow run"
    #       echo "  3. Scroll down to the 'Artifacts' section"
    #       echo "  4. Download 'cloudformation-validation-results-${{ github.run_id }}'"
    #     fi
        
    #     echo "::endgroup::"
